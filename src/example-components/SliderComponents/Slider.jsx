import React, { useState, useEffect, useRef } from "react"
import "./Slider.css"

const realSlides = [
  {
    title: "üöó –ù–∞–±–æ—Ä –≤ –≥—Ä—É–ø–ø—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è!",
    subtitle: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ A –∏ B. –°—Ç–∞—Ä—Ç ‚Äî 12 –∞–ø—Ä–µ–ª—è, —Å 11:00 –¥–æ 14:00.",
    button: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
    image: "/car.png",
    bgColor: "#29B6F6",
  },
  {
    title: "üéì –¢–µ–æ—Ä–∏—è –æ–Ω–ª–∞–π–Ω ‚Äî —É—á–∏—Å—å, –≥–¥–µ —É–¥–æ–±–Ω–æ!",
    subtitle: "–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º 24/7 + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
    button: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å—É",
    image: "/laptop.png",
    bgColor: "#66BB6A",
  },
  {
    title: "üí∞ –°–∫–∏–¥–∫–∞ 10% –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞!",
    subtitle: "–ó–∞–ø–∏—à–∏—Å—å —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.",
    button: "–ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É",
    image: "/discount.png",
    bgColor: "#FF7043",
  },
  {
    title: "üìÖ –°–ª–µ–¥—É—é—â–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç 5 –º–∞—è!",
    subtitle: "–£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.",
    button: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
    image: "/calendar.png",
    bgColor: "#AB47BC",
  },
  {
    title: "üèçÔ∏è –ù–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ê¬ª!",
    subtitle: "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ. –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã —Å –æ–ø—ã—Ç–æ–º.",
    button: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
    image: "/motorcycle.png",
    bgColor: "#42A5F5",
  },
]

export default function Slider1() {
  const [currentIndex, setCurrentIndex] = useState(1) // –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ "—Ä–µ–∞–ª—å–Ω–æ–≥–æ"
  const [isTransitioning, setIsTransitioning] = useState(true)
  const sliderRef = useRef()
  const [visibleDot, setVisibleDot] = useState(null)

  const slides = [
    realSlides[realSlides.length - 1], // –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π
    ...realSlides,
    realSlides[0], // –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π
  ]

  const goToSlide = (index) => {
    setCurrentIndex(index)
    setIsTransitioning(true)
  }

  const nextSlide = () => {
    if (currentIndex >= slides.length - 1) return
    goToSlide(currentIndex + 1)
  }

  const prevSlide = () => {
    if (currentIndex <= 0) return
    goToSlide(currentIndex - 1)
  }

  // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide()
    }, 13800)

    // –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    setVisibleDot(null) // —Å–±—Ä–æ—Å
    requestAnimationFrame(() => {
      setVisibleDot(currentIndex)
    })

    return () => clearInterval(interval)
  }, [currentIndex])

  // –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–ª–æ–Ω–∞, –±—ã—Å—Ç—Ä–æ –ø—Ä—ã–≥–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π
  const handleTransitionEnd = () => {
    if (currentIndex === slides.length - 1) {
      setIsTransitioning(false)
      setCurrentIndex(1) // —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–≤—ã–π
    } else if (currentIndex === 0) {
      setIsTransitioning(false)
      setCurrentIndex(slides.length - 2) // —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π
    }
  }

  return (
    <div className="slider-wrapper">
      <div
        className="slider-track"
        ref={sliderRef}
        style={{
          transform: `translateX(-${currentIndex * 100}%)`,
          transition: isTransitioning ? "transform 0.6s ease-in-out" : "none",
        }}
        onTransitionEnd={handleTransitionEnd}
      >
        {slides.map((slide, idx) => (
          <div
            className="slider"
            style={{ backgroundColor: slide.bgColor }}
            key={idx}
          >
            <div className="slider-content">
              <div className="text-content">
                <h1>{slide.title}</h1>
                <p>{slide.subtitle}</p>
                <button>{slide.button}</button>
              </div>
              <img src={slide.image} alt="slide" className="slider-image" />
            </div>
          </div>
        ))}
      </div>

      {/* –°—Ç—Ä–µ–ª–∫–∏ */}
      <span className="arrow arrow-left" onClick={prevSlide}>
        &#10094;
      </span>
      <span className="arrow arrow-right" onClick={nextSlide}>
        &#10095;
      </span>

      {/* –¢–æ—á–∫–∏ */}
      <div className="dots">
        {realSlides.map((_, idx) => (
          <span
            key={idx}
            className={`dot-wrapper ${
              currentIndex === idx + 1 ? "active" : ""
            }`}
            onClick={() => goToSlide(idx + 1)}
          >
            <svg className="progress-ring" viewBox="0 0 36 36">
              <circle className="bg" cx="18" cy="18" r="13" />
              <circle
                className={`progress ${
                  currentIndex === idx + 1 ? "animating" : ""
                }`}
                cx="18"
                cy="18"
                r="13"
              />
              <circle
                className={`center-fill ${
                  visibleDot === idx + 1 ? "visible" : ""
                }`}
                cx="18"
                cy="18"
                r="7"
              />
            </svg>
          </span>
        ))}
      </div>
    </div>
  )
}
